name: New Custom build RouterOS v7

on:
  workflow_dispatch:
    inputs:
      INPUT_VERSION:
        description: 'Input VERSION CODE (e.g., 7.1.1)'
        required: true
        default: '7.1.1'

permissions:
  contents: write

env:
  MIKRO_NPK_SIGN_PUBLIC_KEY: ${{ secrets.MIKRO_NPK_SIGN_PUBLIC_KEY }}
  MIKRO_LICENSE_PUBLIC_KEY: ${{ secrets.MIKRO_LICENSE_PUBLIC_KEY }}
  CUSTOM_NPK_SIGN_PRIVATE_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PRIVATE_KEY }}
  CUSTOM_NPK_SIGN_PUBLIC_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PUBLIC_KEY }}
  CUSTOM_LICENSE_PRIVATE_KEY: ${{ secrets.CUSTOM_LICENSE_PRIVATE_KEY }}
  CUSTOM_LICENSE_PUBLIC_KEY: ${{ secrets.CUSTOM_LICENSE_PUBLIC_KEY }}

jobs:
  Build_Custom_ROS:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Source
      uses: actions/checkout@v4

    - name: Setup Python Environment
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Fetch and Patch RouterOS ISO and Install Image
      run: |
        INPUT_VERSION=${{ github.event.inputs.INPUT_VERSION }}
        ARCH="x86" # Fixed architecture for simplicity

        echo "Using RouterOS version: $INPUT_VERSION"
        sudo apt-get update -y > /dev/null
        sudo apt-get install -y mkisofs xorriso zip qemu-utils extlinux > /dev/null

        # Download ISO
        echo "Downloading RouterOS ISO..."
        sudo curl -s -o mikrotik.iso "https://download.mikrotik.com/routeros/$INPUT_VERSION/mikrotik-$INPUT_VERSION.iso"

        # Prepare ISO for patching
        echo "Patching RouterOS ISO..."
        sudo mkdir iso new_iso
        sudo mount -o loop,ro mikrotik.iso iso/
        sudo rsync -a iso/ new_iso/
        sudo umount iso/
        sudo rm -rf iso/

        # Patch NPK files
        NPK_FILES=$(find new_iso/*.npk)
        for file in $NPK_FILES; do
          sudo -E python3 patch.py npk $file
        done

        # Copy patched routeros.npk
        sudo cp new_iso/routeros-$INPUT_VERSION.npk routeros-$INPUT_VERSION.npk

        # Recreate ISO
        sudo mkisofs -o mikrotik-$INPUT_VERSION.iso \
                     -V "MikroTik $INPUT_VERSION" \
                     -sysid "" -preparer "MiKroTiK" \
                     -publisher "" -A "MiKroTiK RouterOS" \
                     -input-charset utf-8 \
                     -b isolinux/isolinux.bin \
                     -c isolinux/boot.cat \
                     -no-emul-boot \
                     -boot-load-size 4 \
                     -boot-info-table \
                     -R -J \
                     new_iso/

        # Create additional package zip
        sudo mkdir all_packages
        sudo cp new_iso/*.npk all_packages/
        sudo zip all_packages-$INPUT_VERSION.zip all_packages/*.npk

        # Download and Patch Install Image
        echo "Downloading and Patching Install Image..."
        sudo curl -s -o install-image.zip "https://download.mikrotik.com/routeros/$INPUT_VERSION/install-image-$INPUT_VERSION.zip"
        sudo unzip install-image.zip
        sudo modprobe nbd
        sudo qemu-nbd -c /dev/nbd0 -f raw install-image-$INPUT_VERSION.img
        sudo mkdir install-image
        sudo mount /dev/nbd0 install-image/

        sudo -E python3 patch.py kernel install-image/linux
        NPK_FILES=$(find install-image/*.npk)
        for file in $NPK_FILES; do
          sudo -E python3 patch.py npk $file
        done

        sudo umount /dev/nbd0
        sudo qemu-nbd -d /dev/nbd0
        sudo rm -rf install-image/
        sudo zip install-image-$INPUT_VERSION.zip install-image-$INPUT_VERSION.img

        # Cleanup
        sudo rm -rf new_iso/ all_packages/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: "RouterOS ${{ github.event.inputs.INPUT_VERSION }}"
        body: "Custom RouterOS build for version ${{ github.event.inputs.INPUT_VERSION }}."
        tag_name: "${{ github.event.inputs.INPUT_VERSION }}"
        files: |
          mikrotik-${{ github.event.inputs.INPUT_VERSION }}.iso
          routeros-${{ github.event.inputs.INPUT_VERSION }}.npk
          all_packages-${{ github.event.inputs.INPUT_VERSION }}.zip
          install-image-${{ github.event.inputs.INPUT_VERSION }}.zip
