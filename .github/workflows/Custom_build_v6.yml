name: Patch Mikrotik RouterOS 6.x

on:
  # push:
  #   branches: [ "main" ]
  # schedule:
  #   - cron: '0 */24 * * *'
  workflow_dispatch:
    inputs:
      channel:
        description: 'Channel (stable, long-term)'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - long-term
      version:
        description: "Specify version (e.g., 6.49.19), empty for latest"
        required: false
        default: ''
        type: string
      buildtime:
        description: "Custom build time, leave empty for now,when set specify version"
        required: false
        default: ''
        type: string
      release:
        description: "Release to GitHub & Upload "
        required: false
        default: false
        type: boolean
permissions:
  contents: write

env:
  MIKRO_NPK_SIGN_PUBLIC_KEY: ${{ secrets.MIKRO_NPK_SIGN_PUBLIC_KEY }}
  MIKRO_LICENSE_PUBLIC_KEY: ${{ secrets.MIKRO_LICENSE_PUBLIC_KEY }}
  CUSTOM_NPK_SIGN_PRIVATE_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PRIVATE_KEY }}
  CUSTOM_NPK_SIGN_PUBLIC_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PUBLIC_KEY }}
  CUSTOM_LICENSE_PRIVATE_KEY: ${{ secrets.CUSTOM_LICENSE_PRIVATE_KEY }}
  CUSTOM_LICENSE_PUBLIC_KEY: ${{ secrets.CUSTOM_LICENSE_PUBLIC_KEY }}
  
jobs:
  Set_Variables:
    runs-on: ubuntu-22.04
    outputs:
      BUILD_TIME: ${{ steps.set_vars.outputs.BUILD_TIME }}
      RELEASE: ${{ steps.set_vars.outputs.RELEASE }}
      MATRIX_JSON: ${{ steps.set_vars.outputs.MATRIX_JSON }}
    steps:
      - name: Set variables
        id: set_vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BUILD_TIME="${{ github.event.inputs.buildtime }}"
            RELEASE="${{ github.event.inputs.release }}"
            if [ -z "$BUILD_TIME" ]; then
              BUILD_TIME=$(date +'%s')
            fi
            if [ -z "$RELEASE" ]; then
              RELEASE=false
            fi
            ARCH="${{ github.event.inputs.arch }}"
            CHANNEL="${{ github.event.inputs.channel }}"
            MATRIX_JSON=$(jq -nc --arg arch "$ARCH" --arg channel "$CHANNEL" '[{arch: $arch, channel: $channel}]')
          else
            BUILD_TIME=$(date +'%s')
            RELEASE=true
            MATRIX_JSON='[{"arch":"x86","channel":"stable"},{"arch":"x86","channel":"long-term"}]'
          fi
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "RELEASE=$RELEASE" >> $GITHUB_OUTPUT
          echo "MATRIX_JSON=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "BUILD_TIME: $BUILD_TIME"
          echo "RELEASE: $RELEASE"
          echo "MATRIX_JSON: $MATRIX_JSON"
          
  Build_ROS_v6:
    needs: Set_Variables
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        include: ${{ fromJSON(needs.Set_Variables.outputs.MATRIX_JSON) }}
    env:
      TZ: 'Asia/Shanghai'
      BUILD_TIME: ${{ needs.Set_Variables.outputs.BUILD_TIME }}
      RELEASE: ${{ needs.Set_Variables.outputs.RELEASE }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Check latest version
      id: get_latest
      run: |
        echo $(uname -a)
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [ -n "${{ github.event.inputs.version }}" ]; then
            LATEST_VERSION="${{ github.event.inputs.version }}"
          else
            read LATEST_VERSION BUILD_TIME <<< "$(wget -nv -O - "https://upgrade.mikrotik.com/routeros/NEWEST6.${{ matrix.channel }}")"
          fi
        else
          read LATEST_VERSION BUILD_TIME <<< "$(wget -nv -O - "https://upgrade.mikrotik.com/routeros/NEWEST6.${{ matrix.channel }}")"
        fi
        echo Build Time:$BUILD_TIME
        echo Latest Version:$LATEST_VERSION
        echo "has_new_version=true" >> $GITHUB_OUTPUT
        wget -nv -O CHANGELOG https://upgrade.mikrotik.com/routeros/$LATEST_VERSION/CHANGELOG
        cat CHANGELOG
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
        echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
        sudo apt-get update > /dev/null
        
    - name: Cache mikrotik-${{ env.LATEST_VERSION }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true'
      id: cache_mikrotik
      uses: actions/cache@v4
      with:
        path: mikrotik.iso
        key: mikrotik-${{ env.LATEST_VERSION }}-x86

    - name: Get mikrotik-${{ env.LATEST_VERSION }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache_mikrotik.outputs.cache-hit != 'true'
      run: |
        sudo curl -s -o mikrotik.iso https://download.mikrotik.com/routeros/$LATEST_VERSION/mikrotik-$LATEST_VERSION.iso

    - name: Patch mikrotik-${{ env.LATEST_VERSION }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        sudo apt-get install -y mkisofs xorriso --no-install-recommends > /dev/null
        sudo mkdir iso
        sudo mount -o loop,ro mikrotik.iso iso/
        sudo mkdir new_iso/
        sudo cp -r iso/* new_iso/
        sudo rsync -a iso/ new_iso/
        sudo umount iso/
        sudo rm -rf iso/
        sudo -E python3 patch.py kernel new_iso/isolinux/initrd.rgz
        NPK_FILES=$(find new_iso/*.npk)
        for file in $NPK_FILES; do
          sudo -E python3 patch.py npk $file
        done
        sudo mkisofs -o mikrotik-$LATEST_VERSION.iso \
                     -V "MikroTik $LATEST_VERSION" \
                     -sysid "" -preparer "MiKroTiK" \
                     -publisher "" -A "MiKroTiK RouterOS" \
                     -input-charset utf-8 \
                     -b isolinux/isolinux.bin \
                     -c isolinux/boot.cat \
                     -no-emul-boot \
                     -boot-load-size 4 \
                     -boot-info-table \
                     -R -J \
                     new_iso/
        sudo mkdir -p all_packages
        sudo cp new_iso/*.npk all_packages/
        sudo rm -rf new_iso/
        cd all_packages/
        sudo zip ../all_packages-x86-$LATEST_VERSION.zip *.npk
        cd ../

    - name: Cache install-image-${{ env.LATEST_VERSION }}.zip
      if: steps.get_latest.outputs.has_new_version == 'true'
      id: cache_install_image
      uses: actions/cache@v4
      with:
        path: install-image.zip
        key: install-image-${{ env.LATEST_VERSION }}-x86

    - name: Get install-image-${{ env.LATEST_VERSION }}.zip
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache_install_image.outputs.cache-hit != 'true'
      run: |
        sudo curl -s -o install-image.zip https://download.mikrotik.com/routeros/$LATEST_VERSION/install-image-$LATEST_VERSION.zip

    - name: Patch install-image-${{ env.LATEST_VERSION }}.img
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        sudo apt-get install -y qemu-utils extlinux --no-install-recommends > /dev/null
        sudo unzip install-image.zip
        sudo modprobe nbd
        sudo qemu-nbd -c /dev/nbd0 -f raw install-image-$LATEST_VERSION.img
        sudo mkdir install-image
        sudo mount /dev/nbd0 install-image/
        sudo -E python3 patch.py kernel install-image/initrd.rgz
        NPK_FILES=$(find install-image/*.npk)
        for file in $NPK_FILES; do
          sudo -E python3 patch.py npk $file
        done
        sudo umount /dev/nbd0
        sudo qemu-nbd -d /dev/nbd0
        sudo rm -rf install-image/
        sudo zip install-image-$LATEST_VERSION.img.zip install-image-$LATEST_VERSION.img
        sudo rm install-image-$LATEST_VERSION.img
        
    - name: Cache chr-${{ env.LATEST_VERSION }}.img
      if: steps.get_latest.outputs.has_new_version == 'true'
      id: cache_chr_img
      uses: actions/cache@v4
      with:
        path: chr.img
        key: chr-${{ env.LATEST_VERSION }}.img

    - name: Get chr-${{ env.LATEST_VERSION }}.img
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache_chr_img.outputs.cache-hit != 'true'
      run: |
          sudo wget -nv -O chr.img.zip https://download.mikrotik.com/routeros/$LATEST_VERSION/chr-$LATEST_VERSION.img.zip
          sudo unzip chr.img.zip
          sudo rm chr.img.zip
          sudo mv chr-$LATEST_VERSION.img chr.img

    - name: Patch chr-${{ env.LATEST_VERSION }}.img
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        OVF_TEMPLATE='<?xml version="1.0" encoding="UTF-8"?>
        <Envelope vmw:buildId="build-18663434" xmlns="http://schemas.dmtf.org/ovf/envelope/1" xmlns:cim="http://schemas.dmtf.org/wbem/wscim/1/common" xmlns:ovf="http://schemas.dmtf.org/ovf/envelope/1" xmlns:rasd="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData" xmlns:vmw="http://www.vmware.com/schema/ovf" xmlns:vssd="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <References>
            <File ovf:href="{VMDK_FILE}" ovf:id="file1" ovf:size="{FILE_SIZE}"/>
          </References>
          <DiskSection>
            <Info>Virtual disk information</Info>
            <Disk ovf:capacity="{CAPACITY_MB}" ovf:capacityAllocationUnits="byte * 2^20" ovf:diskId="vmdisk1" ovf:fileRef="file1" ovf:format="http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized" ovf:populatedSize="{POPULATED_SIZE}"/>
          </DiskSection>
          <NetworkSection>
            <Info>The list of logical networks</Info>
            <Network ovf:name="VM Network">
              <Description>The VM Network network</Description>
            </Network>
          </NetworkSection>
          <VirtualSystem ovf:id="vm">
            <Info>A virtual machine</Info>
            <Name>MikroTik_RouterOS_CHR</Name>
            <OperatingSystemSection ovf:id="100" vmw:osType="other3xLinux64Guest">
              <Info>The kind of installed guest operating system</Info>
            </OperatingSystemSection>
            <VirtualHardwareSection>
              <Info>Virtual hardware requirements</Info>
              <System>
                <vssd:ElementName>Virtual Hardware Family</vssd:ElementName>
                <vssd:InstanceID>0</vssd:InstanceID>
                <vssd:VirtualSystemIdentifier>MikroTik_RouterOS_CHR</vssd:VirtualSystemIdentifier>
                <vssd:VirtualSystemType>vmx-10</vssd:VirtualSystemType>
              </System>
              <Item>
                <rasd:AllocationUnits>hertz * 10^6</rasd:AllocationUnits>
                <rasd:Description>Number of Virtual CPUs</rasd:Description>
                <rasd:ElementName>1 virtual CPU(s)</rasd:ElementName>
                <rasd:InstanceID>1</rasd:InstanceID>
                <rasd:ResourceType>3</rasd:ResourceType>
                <rasd:VirtualQuantity>1</rasd:VirtualQuantity>
              </Item>
              <Item>
                <rasd:AllocationUnits>byte * 2^20</rasd:AllocationUnits>
                <rasd:Description>Memory Size</rasd:Description>
                <rasd:ElementName>1024MB of memory</rasd:ElementName>
                <rasd:InstanceID>2</rasd:InstanceID>
                <rasd:ResourceType>4</rasd:ResourceType>
                <rasd:VirtualQuantity>1024</rasd:VirtualQuantity>
              </Item>
              <Item>
                <rasd:Address>0</rasd:Address>
                <rasd:Description>IDE Controller</rasd:Description>
                <rasd:ElementName>ideController0</rasd:ElementName>
                <rasd:InstanceID>3</rasd:InstanceID>
                <rasd:ResourceType>5</rasd:ResourceType>
              </Item>
              <Item>
                <rasd:AddressOnParent>0</rasd:AddressOnParent>
                <rasd:ElementName>disk0</rasd:ElementName>
                <rasd:HostResource>ovf:/disk/vmdisk1</rasd:HostResource>
                <rasd:InstanceID>4</rasd:InstanceID>
                <rasd:Parent>3</rasd:Parent>
                <rasd:ResourceType>17</rasd:ResourceType>
              </Item>
              <Item>
                <rasd:AddressOnParent>1</rasd:AddressOnParent>
                <rasd:AutomaticAllocation>true</rasd:AutomaticAllocation>
                <rasd:Connection>VM Network</rasd:Connection>
                <rasd:Description>VmxNet3 ethernet adapter on &quot;VM Network&quot;</rasd:Description>
                <rasd:ElementName>ethernet0</rasd:ElementName>
                <rasd:InstanceID>5</rasd:InstanceID>
                <rasd:ResourceSubType>VmxNet3</rasd:ResourceSubType>
                <rasd:ResourceType>10</rasd:ResourceType>
                <vmw:Config ovf:required="false" vmw:key="slotInfo.pciSlotNumber" vmw:value="160"/>
                <vmw:Config ovf:required="false" vmw:key="connectable.allowGuestControl" vmw:value="true"/>
              </Item>
              <Item ovf:required="false">
                <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>
                <rasd:ElementName>video</rasd:ElementName>
                <rasd:InstanceID>6</rasd:InstanceID>
                <rasd:ResourceType>24</rasd:ResourceType>
              </Item>
              <Item ovf:required="false">
                <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>
                <rasd:ElementName>vmci</rasd:ElementName>
                <rasd:InstanceID>7</rasd:InstanceID>
                <rasd:ResourceSubType>vmware.vmci</rasd:ResourceSubType>
                <rasd:ResourceType>1</rasd:ResourceType>
              </Item>
              <vmw:Config ovf:required="false" vmw:key="firmware" vmw:value="{FIRMWARE_TYPE}"/>
            </VirtualHardwareSection>
            <AnnotationSection ovf:required="false">
              <Info>A human-readable annotation</Info>
              <Annotation>MikroTik RouterOS CHR</Annotation>
            </AnnotationSection>
          </VirtualSystem>
        </Envelope>' 
        sudo modprobe nbd
        sudo apt-get install -y qemu-utils > /dev/null
        truncate --size 128M chr-$LATEST_VERSION.img
        sgdisk --clear --set-alignment=2 \
            --new=1::+32M --typecode=1:8300 --change-name=1:"RouterOS Boot" --attributes=1:set:2 \
            --new=2::-0 --typecode=2:8300 --change-name=2:"RouterOS" \
            --gpttombr=1:2 \
            chr-$LATEST_VERSION.img
        dd if=chr-$LATEST_VERSION.img of=pt.bin bs=1 count=66 skip=446
        echo -e "\x80" | dd of=pt.bin  bs=1 count=1  conv=notrunc
        sgdisk --mbrtogpt --clear --set-alignment=2 \
            --new=1::+32M --typecode=1:8300 --change-name=1:"RouterOS Boot" --attributes=1:set:2 \
            --new=2::-0 --typecode=2:8300 --change-name=2:"RouterOS" \
            chr-$LATEST_VERSION.img
        dd if=chr.img of=chr-$LATEST_VERSION.img bs=1 count=446 conv=notrunc
        dd if=pt.bin of=chr-$LATEST_VERSION.img  bs=1 count=66 seek=446 conv=notrunc
        # Connect the raw image using qemu-nbd
        sudo qemu-nbd -c /dev/nbd0 -f raw chr-$LATEST_VERSION.img

        # Format the partitions
        sudo mkfs.vfat -n "Boot" /dev/nbd0p1
        sudo mkfs.ext4 -F -L "RouterOS" -m 0 /dev/nbd0p2

        # Create mount points
        sudo mkdir -p ./img/{boot,routeros}

        # Mount partitions
        sudo mount /dev/nbd0p1 ./img/boot/
        sudo mount /dev/nbd0p2 ./img/routeros/

        # Copy packages (v6 typically uses only `routeros.npk`, but add others if needed)
        sudo mkdir -p ./img/routeros/var/pdb/system/image
        sudo cp ./all_packages/routeros-$LATEST_VERSION.npk ./img/routeros/var/pdb/system/image/

        # Optional: include other packages if needed
        # sudo mkdir -p ./img/routeros/var/pdb/advanced-tools/image
        # sudo cp ./all_packages/advanced-tools-$LATEST_VERSION.npk ./img/routeros/var/pdb/advanced-tools/image/

        # Optional: add rc.local
        sudo mkdir -p ./img/routeros/rw/disk
        echo -e '#!/bin/sh\n# Init script before RouterOS loader' | sudo tee ./img/routeros/rw/disk/rc.local

        # Clean up
        sudo umount /dev/nbd0p1
        sudo umount /dev/nbd0p2
        sudo qemu-nbd -d /dev/nbd0
        sudo rm -rf ./img

        sudo qemu-img convert -f raw -O qcow2 chr-$LATEST_VERSION-legacy-bios.img chr-$LATEST_VERSION-legacy-bios.qcow2
        sudo qemu-img convert -f raw -O vmdk chr-$LATEST_VERSION-legacy-bios.img chr-$LATEST_VERSION-legacy-bios.vmdk
        sudo qemu-img convert -f raw -O vpc chr-$LATEST_VERSION-legacy-bios.img chr-$LATEST_VERSION-legacy-bios.vhd
        sudo qemu-img convert -f raw -O vhdx chr-$LATEST_VERSION-legacy-bios.img chr-$LATEST_VERSION-legacy-bios.vhdx
        sudo qemu-img convert -f raw -O vdi chr-$LATEST_VERSION-legacy-bios.img chr-$LATEST_VERSION-legacy-bios.vdi
          
        sudo qemu-img convert -f raw -O vmdk -o subformat=streamOptimized chr-$LATEST_VERSION-legacy-bios.img chr-$LATEST_VERSION-legacy-bios-disk1.vmdk
        VMDK=chr-$LATEST_VERSION-legacy-bios-disk1.vmdk
        OVF=chr-$LATEST_VERSION-legacy-bios.ovf
        OVA=chr-$LATEST_VERSION-legacy-bios.ova
        FILE_SIZE=$(stat -c %s "$VMDK")
        VIRTUAL_SIZE=$(qemu-img info --output=json "$VMDK" | jq '.["virtual-size"]' | head -n 1)
        CAPACITY_MB=$((VIRTUAL_SIZE / 1024 / 1024))
        POPULATED_SIZE=$FILE_SIZE
        FIRMWARE_TYPE="bios" 
        echo "$OVF_TEMPLATE" | sudo sed -e "s|{VMDK_FILE}|$VMDK|g" \
            -e "s|{FILE_SIZE}|$FILE_SIZE|g" \
            -e "s|{CAPACITY_MB}|$CAPACITY_MB|g" \
            -e "s|{POPULATED_SIZE}|$POPULATED_SIZE|g" \
            -e "s|{FIRMWARE_TYPE}|$FIRMWARE_TYPE|g" |sudo tee $OVF
        sudo tar -cvf "$OVA" "$OVF" "$VMDK"
        sudo rm $VMDK
        sudo rm $OVF
        sudo zip $OVA.zip $OVA
        sudo rm $OVA
        
        sudo zip chr-$LATEST_VERSION-legacy-bios.qcow2.zip chr-$LATEST_VERSION-legacy-bios.qcow2
        sudo zip chr-$LATEST_VERSION-legacy-bios.vmdk.zip chr-$LATEST_VERSION-legacy-bios.vmdk
        sudo zip chr-$LATEST_VERSION-legacy-bios.vhd.zip chr-$LATEST_VERSION-legacy-bios.vhd
        sudo zip chr-$LATEST_VERSION-legacy-bios.vhdx.zip chr-$LATEST_VERSION-legacy-bios.vhdx
        sudo zip chr-$LATEST_VERSION-legacy-bios.vdi.zip chr-$LATEST_VERSION-legacy-bios.vdi
        sudo zip chr-$LATEST_VERSION-legacy-bios.img.zip chr-$LATEST_VERSION-legacy-bios.img

        sudo rm chr-$LATEST_VERSION-legacy-bios.qcow2
        sudo rm chr-$LATEST_VERSION-legacy-bios.vmdk
        sudo rm chr-$LATEST_VERSION-legacy-bios.vhd
        sudo rm chr-$LATEST_VERSION-legacy-bios.vhdx
        sudo rm chr-$LATEST_VERSION-legacy-bios.vdi
        sudo rm chr-$LATEST_VERSION-legacy-bios.img

        sudo umount /dev/nbd0p1
        sudo mount  /dev/nbd0p2 ./img/routeros/
        sudo mkdir -p ./img/routeros/{var/pdb/{system,option},boot,rw}
        sudo cp ./all_packages/option-$LATEST_VERSION.npk ./img/routeros/var/pdb/option/image
        sudo cp ./all_packages/routeros-$LATEST_VERSION.npk ./img/routeros/var/pdb/system/image
        sudo umount /dev/nbd0p2
        sudo rm -rf ./img
        sudo qemu-nbd -d /dev/nbd0

        sudo qemu-img convert -f raw -O qcow2 chr-$LATEST_VERSION.img chr-$LATEST_VERSION.qcow2
        sudo qemu-img convert -f raw -O vmdk  chr-$LATEST_VERSION.img chr-$LATEST_VERSION.vmdk
        sudo qemu-img convert -f raw -O vpc chr-$LATEST_VERSION.img chr-$LATEST_VERSION.vhd
        sudo qemu-img convert -f raw -O vhdx chr-$LATEST_VERSION.img chr-$LATEST_VERSION.vhdx
        sudo qemu-img convert -f raw -O vdi chr-$LATEST_VERSION.img chr-$LATEST_VERSION.vdi

        sudo qemu-img convert -f raw -O vmdk -o subformat=streamOptimized chr-$LATEST_VERSION.img chr-$LATEST_VERSION-disk1.vmdk
        VMDK=chr-$LATEST_VERSION-disk1.vmdk
        OVF=chr-$LATEST_VERSION.ovf
        OVA=chr-$LATEST_VERSION.ova
        FILE_SIZE=$(stat -c %s "$VMDK")
        VIRTUAL_SIZE=$(qemu-img info --output=json "$VMDK" | jq '.["virtual-size"]' | head -n 1)
        CAPACITY_MB=$((VIRTUAL_SIZE / 1024 / 1024))
        POPULATED_SIZE=$FILE_SIZE
        FIRMWARE_TYPE="bios" 
        echo "$OVF_TEMPLATE" | sudo sed -e "s|{VMDK_FILE}|$VMDK|g" \
            -e "s|{FILE_SIZE}|$FILE_SIZE|g" \
            -e "s|{CAPACITY_MB}|$CAPACITY_MB|g" \
            -e "s|{POPULATED_SIZE}|$POPULATED_SIZE|g" \
            -e "s|{FIRMWARE_TYPE}|$FIRMWARE_TYPE|g" |sudo tee $OVF
        sudo tar -cvf "$OVA" "$OVF" "$VMDK"
        sudo rm $VMDK
        sudo rm $OVF
        sudo zip $OVA.zip $OVA
        sudo rm $OVA

        sudo zip chr-$LATEST_VERSION.qcow2.zip chr-$LATEST_VERSION.qcow2
        sudo zip chr-$LATEST_VERSION.vmdk.zip chr-$LATEST_VERSION.vmdk
        sudo zip chr-$LATEST_VERSION.vhd.zip chr-$LATEST_VERSION.vhd
        sudo zip chr-$LATEST_VERSION.vhdx.zip chr-$LATEST_VERSION.vhdx
        sudo zip chr-$LATEST_VERSION.vdi.zip chr-$LATEST_VERSION.vdi
        sudo zip chr-$LATEST_VERSION.img.zip chr-$LATEST_VERSION.img

        sudo rm chr-$LATEST_VERSION.qcow2
        sudo rm chr-$LATEST_VERSION.vmdk
        sudo rm chr-$LATEST_VERSION.vhd
        sudo rm chr-$LATEST_VERSION.vhdx
        sudo rm chr-$LATEST_VERSION.vdi
        sudo rm chr-$LATEST_VERSION.img

    - name: Update latest version
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add .
        if git diff --cached --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update latest version"
          git push
        fi

    - name: Create Release tag ${{ env.LATEST_VERSION }}
      if: steps.get_latest.outputs.has_new_version == 'true'
      uses: softprops/action-gh-release@v2
      with:
        name: "RouterOS ${{ env.LATEST_VERSION }}"
        body_path: "CHANGELOG"
        tag_name: ${{ env.LATEST_VERSION }}
        make_latest: false
        prerelease:  ${{ matrix.channel == 'testing' }}
        files: |
          mikrotik-${{ env.LATEST_VERSION }}.iso
          chr-${{ env.LATEST_VERSION }}*.zip
          netinstall-${{ env.LATEST_VERSION }}.*
          install-image-${{ env.LATEST_VERSION }}.zip
          routeros-x86-${{ env.LATEST_VERSION }}.npk
          all_packages-x86-${{ env.LATEST_VERSION }}.zip
