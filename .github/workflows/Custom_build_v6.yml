name: Patch Mikrotik RouterOS 6.x

on:
  # push:
  #   branches: [ "main" ]
  # schedule:
  #   - cron: '0 */24 * * *'
  workflow_dispatch:
    inputs:
      channel:
        description: 'Channel (stable, long-term)'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - long-term
      version:
        description: "Specify version (e.g., 6.49.19), empty for latest"
        required: false
        default: ''
        type: string
      buildtime:
        description: "Custom build time, leave empty for now,when set specify version"
        required: false
        default: ''
        type: string
      release:
        description: "Release to GitHub & Upload "
        required: false
        default: false
        type: boolean
permissions:
  contents: write

env:
  MIKRO_NPK_SIGN_PUBLIC_KEY: ${{ secrets.MIKRO_NPK_SIGN_PUBLIC_KEY }}
  MIKRO_LICENSE_PUBLIC_KEY: ${{ secrets.MIKRO_LICENSE_PUBLIC_KEY }}
  CUSTOM_NPK_SIGN_PRIVATE_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PRIVATE_KEY }}
  CUSTOM_NPK_SIGN_PUBLIC_KEY: ${{ secrets.CUSTOM_NPK_SIGN_PUBLIC_KEY }}
  CUSTOM_LICENSE_PRIVATE_KEY: ${{ secrets.CUSTOM_LICENSE_PRIVATE_KEY }}
  CUSTOM_LICENSE_PUBLIC_KEY: ${{ secrets.CUSTOM_LICENSE_PUBLIC_KEY }}
  
jobs:
  Set_Variables:
    runs-on: ubuntu-22.04
    outputs:
      BUILD_TIME: ${{ steps.set_vars.outputs.BUILD_TIME }}
      RELEASE: ${{ steps.set_vars.outputs.RELEASE }}
      MATRIX_JSON: ${{ steps.set_vars.outputs.MATRIX_JSON }}
    steps:
      - name: Set variables
        id: set_vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BUILD_TIME="${{ github.event.inputs.buildtime }}"
            RELEASE="${{ github.event.inputs.release }}"
            if [ -z "$BUILD_TIME" ]; then
              BUILD_TIME=$(date +'%s')
            fi
            if [ -z "$RELEASE" ]; then
              RELEASE=false
            fi
            ARCH="${{ github.event.inputs.arch }}"
            CHANNEL="${{ github.event.inputs.channel }}"
            MATRIX_JSON=$(jq -nc --arg arch "$ARCH" --arg channel "$CHANNEL" '[{arch: $arch, channel: $channel}]')
          else
            BUILD_TIME=$(date +'%s')
            RELEASE=true
            MATRIX_JSON='[{"arch":"x86","channel":"stable"},{"arch":"x86","channel":"long-term"}]'
          fi
          echo "BUILD_TIME=$BUILD_TIME" >> $GITHUB_OUTPUT
          echo "RELEASE=$RELEASE" >> $GITHUB_OUTPUT
          echo "MATRIX_JSON=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "BUILD_TIME: $BUILD_TIME"
          echo "RELEASE: $RELEASE"
          echo "MATRIX_JSON: $MATRIX_JSON"
          
  Build_ROS_v6:
    needs: Set_Variables
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        include: ${{ fromJSON(needs.Set_Variables.outputs.MATRIX_JSON) }}
    env:
      TZ: 'Asia/Shanghai'
      BUILD_TIME: ${{ needs.Set_Variables.outputs.BUILD_TIME }}
      RELEASE: ${{ needs.Set_Variables.outputs.RELEASE }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Check latest version
      id: get_latest
      run: |
        echo $(uname -a)
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [ -n "${{ github.event.inputs.version }}" ]; then
            LATEST_VERSION="${{ github.event.inputs.version }}"
          else
            read LATEST_VERSION BUILD_TIME <<< "$(wget -nv -O - "https://upgrade.mikrotik.com/routeros/NEWEST6.${{ matrix.channel }}")"
          fi
        else
          read LATEST_VERSION BUILD_TIME <<< "$(wget -nv -O - "https://upgrade.mikrotik.com/routeros/NEWEST6.${{ matrix.channel }}")"
        fi
        echo Build Time:$BUILD_TIME
        echo Latest Version:$LATEST_VERSION
        echo "has_new_version=true" >> $GITHUB_OUTPUT
        wget -nv -O CHANGELOG https://upgrade.mikrotik.com/routeros/$LATEST_VERSION/CHANGELOG
        cat CHANGELOG
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
        echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
        sudo apt-get update > /dev/null
        
    - name: Cache mikrotik-${{ env.LATEST_VERSION }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true'
      id: cache_mikrotik
      uses: actions/cache@v4
      with:
        path: mikrotik.iso
        key: mikrotik-${{ env.LATEST_VERSION }}-x86

    - name: Get mikrotik-${{ env.LATEST_VERSION }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache_mikrotik.outputs.cache-hit != 'true'
      run: |
        sudo curl -s -o mikrotik.iso https://download.mikrotik.com/routeros/$LATEST_VERSION/mikrotik-$LATEST_VERSION.iso

    - name: Patch mikrotik-${{ env.LATEST_VERSION }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        sudo apt-get install -y mkisofs xorriso --no-install-recommends > /dev/null
        sudo mkdir iso
        sudo mount -o loop,ro mikrotik.iso iso/
        sudo mkdir new_iso/
        sudo cp -r iso/* new_iso/
        sudo rsync -a iso/ new_iso/
        sudo umount iso/
        sudo rm -rf iso/
        sudo -E python3 patch.py kernel new_iso/isolinux/initrd.rgz
        NPK_FILES=$(find new_iso/*.npk)
        for file in $NPK_FILES; do
          sudo -E python3 patch.py npk $file
        done
        sudo mkisofs -o mikrotik-$LATEST_VERSION-OEM.iso \
                     -V "MikroTik $LATEST_VERSION" \
                     -sysid "" -preparer "MiKroTiK" \
                     -publisher "" -A "MiKroTiK RouterOS" \
                     -input-charset utf-8 \
                     -b isolinux/isolinux.bin \
                     -c isolinux/boot.cat \
                     -no-emul-boot \
                     -boot-load-size 4 \
                     -boot-info-table \
                     -R -J \
                     new_iso/
        sudo mkdir all_packages
        sudo cp new_iso/*.npk all_packages/
        sudo rm -rf new_iso/
        cd all_packages/
        sudo zip ../all_packages-x86-$LATEST_VERSION-OEM.zip *.npk
        cd ../

    - name: Cache install-image-${{ env.LATEST_VERSION }}.zip
      if: steps.get_latest.outputs.has_new_version == 'true'
      id: cache_install_image
      uses: actions/cache@v4
      with:
        path: install-image.zip
        key: install-image-${{ env.LATEST_VERSION }}-x86

    - name: Get install-image-${{ env.LATEST_VERSION }}.zip
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache_install_image.outputs.cache-hit != 'true'
      run: |
        sudo curl -s -o install-image.zip https://download.mikrotik.com/routeros/$LATEST_VERSION/install-image-$LATEST_VERSION.zip

    - name: Patch install-image-${{ env.LATEST_VERSION }}.img
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        sudo apt-get install -y qemu-utils extlinux --no-install-recommends > /dev/null
        sudo unzip install-image.zip
        sudo modprobe nbd
        sudo qemu-nbd -c /dev/nbd0 -f raw install-image-$LATEST_VERSION.img
        sudo mkdir install-image
        sudo mount /dev/nbd0 install-image/
        sudo -E python3 patch.py kernel install-image/initrd.rgz
        NPK_FILES=$(find install-image/*.npk)
        for file in $NPK_FILES; do
          sudo -E python3 patch.py npk $file
        done
        sudo umount /dev/nbd0
        sudo qemu-nbd -d /dev/nbd0
        sudo rm -rf install-image/
        sudo mv install-image-$LATEST_VERSION.img install-image-$LATEST_VERSION-OEM.img
        sudo zip install-image-$LATEST_VERSION-OEM.img.zip install-image-$LATEST_VERSION-OEM.img
        sudo rm install-image-$LATEST_VERSION-OEM.img
        
    - name: Cache chr-${{ env.LATEST_VERSION }}.img
      if: steps.get_latest.outputs.has_new_version == 'true'
      id: cache_chr_img
      uses: actions/cache@v4
      with:
        path: chr.img
        key: chr-${{ env.LATEST_VERSION }}.img

    - name: Get chr-${{ env.LATEST_VERSION }}.img
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache_chr_img.outputs.cache-hit != 'true'
      run: |
          sudo wget -nv -O chr.img.zip https://download.mikrotik.com/routeros/$LATEST_VERSION/chr-$LATEST_VERSION.img.zip
          sudo unzip chr.img.zip
          sudo rm chr.img.zip
          sudo mv chr-$LATEST_VERSION.img chr.img

    - name: Patch chr-${{ env.LATEST_VERSION }}.img
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        sudo modprobe nbd
        sudo apt-get install -y qemu-utils extlinux > /dev/null
        sudo mkdir ./chr
        sudo cp chr.img chr-$LATEST_VERSION.img
        sudo qemu-nbd -c /dev/nbd0 -f raw chr-$LATEST_VERSION.img
        sudo -E python3 patch.py block /dev/nbd0p1 boot/initrd.rgz
        sudo mount /dev/nbd0p1 ./chr
        sudo cp ./all_packages/dude-$LATEST_VERSION.npk ./chr/var/pdb/dude/image
        sudo -E python3 patch.py npk ./chr/var/pdb/routeros-x86/image
        sudo cp ./chr/var/pdb/routeros-x86/image ./all_packages/routeros-x86-$LATEST_VERSION.npk
        #sudo mkdir -p ./chr/var/pdb/option
        #sudo cp ./all_packages/option-$LATEST_VERSION.npk ./chr/var/pdb/option/image
        sudo umount ./chr
        sudo qemu-nbd -d /dev/nbd0
        sudo rm -rf ./chr
        sudo qemu-img convert -f raw -O qcow2 chr-$LATEST_VERSION.img chr-$LATEST_VERSION.qcow2
        sudo qemu-img convert -f raw -O vmdk chr-$LATEST_VERSION.img chr-$LATEST_VERSION.vmdk
        sudo qemu-img convert -f raw -O vpc chr-$LATEST_VERSION.img chr-$LATEST_VERSION.vhd
        sudo qemu-img convert -f raw -O vhdx chr-$LATEST_VERSION.img chr-$LATEST_VERSION.vhdx
        sudo qemu-img convert -f raw -O vdi chr-$LATEST_VERSION.img chr-$LATEST_VERSION.vdi

        sudo zip chr-$LATEST_VERSION.qcow2.zip chr-$LATEST_VERSION.qcow2
        sudo zip chr-$LATEST_VERSION.vmdk.zip chr-$LATEST_VERSION.vmdk
        sudo zip chr-$LATEST_VERSION.vhd.zip chr-$LATEST_VERSION.vhd
        sudo zip chr-$LATEST_VERSION.vhdx.zip chr-$LATEST_VERSION.vhdx
        sudo zip chr-$LATEST_VERSION.vdi.zip chr-$LATEST_VERSION.vdi
        sudo zip chr-$LATEST_VERSION.img.zip chr-$LATEST_VERSION.img

        sudo rm chr-$LATEST_VERSION.qcow2
        sudo rm chr-$LATEST_VERSION.vmdk
        sudo rm chr-$LATEST_VERSION.vhd
        sudo rm chr-$LATEST_VERSION.vhdx
        sudo rm chr-$LATEST_VERSION.vdi
        sudo rm chr-$LATEST_VERSION.img

        cd ./all_packages
        sudo zip ../all_packages-x86-$LATEST_VERSION.zip *.npk
        cd ..
        
    - name: Update latest version
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add latest6.txt
        git commit -m "Update latest version"
        git push

    - name: Create Release tag ${{ env.LATEST_VERSION }}
      if: steps.get_latest.outputs.has_new_version == 'true'
      uses: softprops/action-gh-release@v2
      with:
        name: "RouterOS ${{ env.LATEST_VERSION }}"
        body_path: "CHANGELOG"
        tag_name: ${{ env.LATEST_VERSION }}
        make_latest: false
        prerelease:  ${{ matrix.channel == 'testing' }}
        files: |
          mikrotik-${{ env.LATEST_VERSION }}.iso
          chr-${{ env.LATEST_VERSION }}*.zip
          install-image-${{ env.LATEST_VERSION }}.zip
          routeros-x86-${{ env.LATEST_VERSION }}.npk
          all_packages-x86-${{ env.LATEST_VERSION }}.zip
